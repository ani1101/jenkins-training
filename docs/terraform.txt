# Destroy only one resource
$ terraform destroy -target resource_id.resource-name


#Preserved key in terraform 
Ex: AWS secrets
We have to instruct terraform to use paticular profile

# terraform validate
Validate syntax  of terraform file
Ex: Invalid module declared, one module declared multiple times

#what is state file
#How to change in congig of already created resources ($ terraform import)



# Terraform lifecycle Block: Arguments available for life block:
Create before destroy
Prevent destroy
Ignore destroy
Replace trigger by

#The create_before_destroy meta-argument changes this(first destroy and then create new resource) behavior so that the new replacement object is created first, and the prior object is destroyed after the replacement is created.
#To block Terraform from deleting an imported resource, you can use the lifecycle block with the prevent_destroy argument set to true. This argument, when set to true, will prevent Terraform from deleting the resource during a terraform destroy operation.
resource "aws_instance" "example" {
  ami           = "ami-0c94855ba95c574c8"
  instance_type = "t2.micro"

  lifecycle {
    prevent_destroy = true
  }
}



#Terraform to update specific resource
terraform -target=resource



Sample:
# Create VPC
# terraform aws create vpc
resource "aws_vpc" "vpc" {
cidr_block = "${var.vpc-cidr}"
instance_tenancy        = "default"
enable_dns_hostnames    = true
tags      = {
Name    = "Test_VPC"
}
}
# Create Internet Gateway and Attach it to VPC
# terraform aws create internet gateway
resource "aws_internet_gateway" "internet-gateway" {
vpc_id    = aws_vpc.vpc.id
tags = {
Name    = "internet_gateway"
}
}
# Create Public Subnet 1
# terraform aws create subnet
resource "aws_subnet" "public-subnet-1" {
vpc_id                  = aws_vpc.vpc.id
cidr_block              = "${var.Public_Subnet_1}"
availability_zone       = "eu-central-1a"
map_public_ip_on_launch = true
tags      = {
Name    = "public-subnet-1"
}
}
# Create Route Table and Add Public Route
# terraform aws create route table
resource "aws_route_table" "public-route-table" {
vpc_id       = aws_vpc.vpc.id
route {
cidr_block = "0.0.0.0/0"
gateway_id = aws_internet_gateway.internet-gateway.id
}
tags       = {
Name     = "Public Route Table"
}
}
# Associate Public Subnet 1 to "Public Route Table"
# terraform aws associate subnet with route table
resource "aws_route_table_association" "public-subnet-1-route-table-association" {
subnet_id           = aws_subnet.public-subnet-1.id
route_table_id      = aws_route_table.public-route-table.id
}
# Create Private Subnet 1
# terraform aws create subnet
resource "aws_subnet" "private-subnet-1" {
vpc_id                   = aws_vpc.vpc.id
cidr_block               = "${var.Private_Subnet_1}"
availability_zone        = "eu-central-1a"
map_public_ip_on_launch  = false
tags      = {
Name    = "private-subnet-1"
}
}
